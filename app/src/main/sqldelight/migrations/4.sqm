-- Create new history table
CREATE TABLE History(
    _id INTEGER NOT NULL PRIMARY KEY,
    episode_id INTEGER NOT NULL UNIQUE,
    last_seen INTEGER AS Date,
    time_seen INTEGER NOT NULL,
    FOREIGN KEY(episode_id) REFERENCES Episode (_id)
    ON DELETE CASCADE
);

CREATE INDEX history_history_episode_id_index ON History(episode_id);

-- Create new history view
CREATE VIEW HistoryView AS
SELECT
    History._id AS id,
    Anime._id AS animeId,
    Episode._id AS episodeId,
    Anime.title,
    Anime.thumbnail_url AS thumbnailUrl,
    Anime.source,
    Anime.favorite,
    Episode.episode_number AS episodeNumber,
    History.last_seen AS seenAt,
    History.time_seen AS seenDuration,
    max_last_seen.last_seen AS maxSeenAt,
    max_last_seen.episode_id AS maxSeenAtEpisodeId
FROM Anime
JOIN Episode
ON Anime._id = Episode.anime_id
JOIN History
ON Episode._id = History.episode_id
JOIN (
    SELECT Episode.anime_id,Episode._id AS episode_id, MAX(History.last_seen) AS last_seen
    FROM Episode JOIN History
    ON Episode._id = History.episode_id
    GROUP BY Episode.anime_id
) AS max_last_seen
ON Episode.anime_id = max_last_seen.anime_id;


-- Create new column for anime to use in the Updates view
ALTER TABLE Anime
ADD COLUMN date_added INTEGER NOT NULL DEFAULT 0;

UPDATE Anime
SET date_added = (
    SELECT MIN(date_fetch)
    FROM Anime A
    INNER JOIN Episode EP
    ON A._id = EP.anime_id
    WHERE A.favorite = 1
    GROUP BY A._id
);

-- Create the updates view
DROP VIEW IF EXISTS UpdatesView;

CREATE VIEW UpdatesView AS
SELECT
    Anime._id AS animeId,
    Anime.title AS animeTitle,
    Episode._id AS episodeId,
    Episode.name AS episodeName,
    Episode.seen,
    Episode.time_seen,
    Anime.source,
    Anime.favorite,
    Anime.thumbnail_url AS thumbnailUrl,
    Episode.date_upload AS dateUpload,
    Episode.date_fetch AS datefetch
FROM Anime JOIN Episode
ON Anime._id = Episode.anime_id
WHERE favorite = 1
AND date_fetch > date_added
ORDER BY date_fetch DESC;